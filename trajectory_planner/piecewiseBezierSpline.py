#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Time    : 2021/12/8 下午5:38
# @Author  : fjw
# @Email   : fujiawei0724@gmail.com
# @File    : piecewiseBezierSpline.py
# @Software: PyCharm

"""
Generation of the piecewise bezier spline.
"""

import numpy as np
import matplotlib.pyplot as plt
from corridorTrajectoryPlanning import Utils

class Point2f:
    def __init__(self, x, y):
        self.x_ = x
        self.y_ = y

class Point3f:
    def __init__(self, s, d, t):
        self.s_ = s
        self.d_ = d
        self.t_ = t

# 3d trajectory generation
class BezierPiecewiseCurve:
    def __init__(self, s, d, ref_stamps):
        assert(len(s) == len(d))
        assert((len(ref_stamps) - 1) * 6 == len(s))
        self.ref_stamps_ = ref_stamps
        self.segment_num_ = len(ref_stamps) - 1
        self.s_coefficients_ = np.zeros((self.segment_num_, 6))
        self.d_coefficients_ = np.zeros((self.segment_num_, 6))
        for i in range(0, self.segment_num_):
            start_influenced_index = i * 6
            self.s_coefficients_[i][0] = s[start_influenced_index]
            self.s_coefficients_[i][1] = s[start_influenced_index + 1]
            self.s_coefficients_[i][2] = s[start_influenced_index + 2]
            self.s_coefficients_[i][3] = s[start_influenced_index + 3]
            self.s_coefficients_[i][4] = s[start_influenced_index + 4]
            self.s_coefficients_[i][5] = s[start_influenced_index + 5]
            self.d_coefficients_[i][0] = d[start_influenced_index]
            self.d_coefficients_[i][1] = d[start_influenced_index + 1]
            self.d_coefficients_[i][2] = d[start_influenced_index + 2]
            self.d_coefficients_[i][3] = d[start_influenced_index + 3]
            self.d_coefficients_[i][4] = d[start_influenced_index + 4]
            self.d_coefficients_[i][5] = d[start_influenced_index + 5]

    def generateTraj(self, sample_gap=0.01):
        traj = []
        for segment_index in range(self.segment_num_):
            time_span = self.ref_stamps_[segment_index + 1] - self.ref_stamps_[segment_index]
            sample_num = int(time_span / sample_gap)
            if segment_index == self.segment_num_ - 1:
                segment_seeds = np.linspace(0.0, 1.0, sample_num, endpoint=True)
            else:
                segment_seeds = np.linspace(0.0, 1.0, sample_num, endpoint=False)

            for current_seed in segment_seeds:
                time_stamp = self.ref_stamps_[segment_index] + (time_span * current_seed)
                traj.append(self.generatePoint(segment_index, current_seed, time_stamp))
        return traj


    def generatePoint(self, segment_index, remain, time_stamp):
        s_value = self.s_coefficients_[segment_index][0] * pow(1.0 - remain, 5) + 5.0 * self.s_coefficients_[segment_index][1] * remain * pow(1.0 - remain, 4) + 10.0 * self.s_coefficients_[segment_index][2] * pow(remain, 2) * pow(1.0 - remain, 3) + 10.0 * self.s_coefficients_[segment_index][3] * pow(remain, 3) * pow(1.0 - remain, 2) + 5.0 * self.s_coefficients_[segment_index][4] * pow(remain, 4) * (1.0 - remain) + self.s_coefficients_[segment_index][5] * pow(remain, 5)
        d_value = self.d_coefficients_[segment_index][0] * pow(1.0 - remain, 5) + 5.0 * self.d_coefficients_[segment_index][1] * remain * pow(1.0 - remain, 4) + 10.0 * self.d_coefficients_[segment_index][2] * pow(remain, 2) * pow(1.0 - remain, 3) + 10.0 * self.d_coefficients_[segment_index][3] * pow(remain, 3) * pow(1.0 - remain, 2) + 5.0 * self.d_coefficients_[segment_index][4] * pow(remain, 4) * (1.0 - remain) + self.d_coefficients_[segment_index][5] * pow(remain, 5)

        return Point3f(s_value, d_value, time_stamp)

# 2d trajectory generation
class BezierPiecewiseCurve2d:
    def __init__(self, x, ref_stamps):
        assert((len(ref_stamps) - 1) * 6 == len(x))
        self.ref_stamps_ = ref_stamps
        self.segment_num_ = len(ref_stamps) - 1
        self.coefficients_ = np.zeros((self.segment_num_, 6))
        for i in range(0, self.segment_num_):
            start_influenced_index = i * 6
            self.coefficients_[i][0] = x[start_influenced_index]
            self.coefficients_[i][1] = x[start_influenced_index + 1]
            self.coefficients_[i][2] = x[start_influenced_index + 2]
            self.coefficients_[i][3] = x[start_influenced_index + 3]
            self.coefficients_[i][4] = x[start_influenced_index + 4]
            self.coefficients_[i][5] = x[start_influenced_index + 5]

    def generateTraj(self, sample_gap=0.01):
        traj = []
        for segment_index in range(self.segment_num_):
            time_span = self.ref_stamps_[segment_index + 1] - self.ref_stamps_[segment_index]
            sample_num = int(time_span / sample_gap)
            if segment_index == self.segment_num_ - 1:
                segment_seeds = np.linspace(0.0, 1.0, sample_num, endpoint=True)
            else:
                segment_seeds = np.linspace(0.0, 1.0, sample_num, endpoint=False)

            for current_seed in segment_seeds:
                time_stamp = self.ref_stamps_[segment_index] + (time_span * current_seed)
                traj.append(self.generatePoint(segment_index, current_seed, time_stamp))
        return traj

    def generatePoint(self, segment_index, remain, time_stamp):
        value = self.coefficients_[segment_index][0] * pow(1.0 - remain, 5) + 5.0 * self.coefficients_[segment_index][1] * remain * pow(1.0 - remain, 4) + 10.0 * self.coefficients_[segment_index][2] * pow(remain, 2) * pow(1.0 - remain, 3) + 10.0 * self.coefficients_[segment_index][3] * pow(remain, 3) * pow(1.0 - remain, 2) + 5.0 * self.coefficients_[segment_index][4] * pow(remain, 4) * (1.0 - remain) + self.coefficients_[segment_index][5] * pow(remain, 5)

        return Point2f(value, time_stamp)

if __name__ == '__main__':
    s = [29.987067, 32.386557, 34.786095, 37.269394, 39.866382, 42.579385, 42.579385, 45.292389, 48.121410, 51.068775, 54.109211, 57.216034, 57.216034, 60.322857, 63.496065, 66.708973, 69.933480, 73.166257, 73.166257, 74.243849, 75.324198, 76.406934, 77.494439, 78.592818]
    d = [0.425765, 0.397481, 0.371210, 0.346578, 0.323214, 0.300804, 0.300804, 0.278394, 0.256937, 0.236117, 0.215671, 0.195438, 0.195438, 0.175204, 0.155184, 0.135216, 0.115240, 0.095346, 0.095346, 0.088715, 0.082111, 0.075545, 0.069043, 0.062651]
    t = [0.000000, 1.200000, 2.400000, 3.600000, 4.000000]

    bezier_piecewise_curve = BezierPiecewiseCurve(s, d, t)
    points = bezier_piecewise_curve.generateTraj()
    interpolated_s, interpolated_d, interpolated_t = [], [], []
    for point in points:
        interpolated_s.append(point.s_)
        interpolated_d.append(point.d_)
        interpolated_t.append(point.t_)

    # interpolated_s = [-11269.403404, -11269.308024, -11269.212769, -11269.117635, -11269.022618, -11268.927716, -11268.832925, -11268.738242, -11268.643662, -11268.549183, -11268.454800, -11268.360511, -11268.266310, -11268.172196, -11268.078162, -11267.984207, -11267.890325, -11267.796514, -11267.702769, -11267.609085, -11267.515460, -11267.421889, -11267.328369, -11267.234894, -11267.141460, -11267.048065, -11266.954703, -11266.861371, -11266.768064, -11266.674777, -11266.581508, -11266.488251, -11266.395003, -11266.301758, -11266.208513, -11266.115264, -11266.022006, -11265.928735, -11265.835446, -11265.742136, -11265.648800, -11265.555434, -11265.462032, -11265.368592, -11265.275109, -11265.181579, -11265.087996, -11264.994357, -11264.900659, -11264.806895, -11264.713063, -11264.619157, -11264.525174, -11264.431110, -11264.336960, -11264.242720, -11264.148386, -11264.053954, -11263.959420, -11263.864779, -11263.770028, -11263.675162, -11263.580178, -11263.485072, -11263.389839, -11263.294475, -11263.198978, -11263.103343, -11263.007566, -11262.911643, -11262.815571, -11262.719345, -11262.622964, -11262.526421, -11262.429716, -11262.332842, -11262.235798, -11262.138580, -11262.041184, -11261.943607, -11261.845845, -11261.747897, -11261.649758, -11261.551425, -11261.452895, -11261.354166, -11261.255234, -11261.156096, -11261.056750, -11260.957193, -11260.857423, -11260.757436, -11260.657230, -11260.556803, -11260.456152, -11260.355276, -11260.254171, -11260.152835, -11260.051267, -11259.949465, -11259.847426, -11259.745149, -11259.642632, -11259.539873, -11259.436871, -11259.333623, -11259.230130, -11259.126389, -11259.022399, -11258.918159, -11258.813668, -11258.708926, -11258.603930, -11258.498680, -11258.393177, -11258.287418, -11258.181404, -11258.075134, -11257.968609, -11257.861827, -11257.758573, -11257.655186, -11257.551664, -11257.448003, -11257.344200, -11257.240254, -11257.136161, -11257.031920, -11256.927529, -11256.822984, -11256.718286, -11256.613431, -11256.508418, -11256.403247, -11256.297915, -11256.192422, -11256.086766, -11255.980947, -11255.874964, -11255.768815, -11255.662501, -11255.556021, -11255.449375, -11255.342562, -11255.235582, -11255.128435, -11255.021122, -11254.913641, -11254.805994, -11254.698181, -11254.590202, -11254.482058, -11254.373748, -11254.265274, -11254.156637, -11254.047837, -11253.938875, -11253.829751, -11253.720468, -11253.611025, -11253.501424, -11253.391666, -11253.281752, -11253.171684, -11253.061462, -11252.951088, -11252.840564, -11252.729890, -11252.619068, -11252.508099, -11252.396986, -11252.285729, -11252.174329, -11252.062790, -11251.951111, -11251.839296, -11251.727344, -11251.615258, -11251.503040, -11251.390691, -11251.278212, -11251.165606, -11251.052874, -11250.940017, -11250.827037, -11250.713936, -11250.600715, -11250.487376, -11250.373920, -11250.260349, -11250.146664, -11250.032867, -11249.918959, -11249.804941, -11249.690816, -11249.576583, -11249.462245, -11249.347803, -11249.233257, -11249.118610, -11249.003861, -11248.889012, -11248.774065, -11248.659019, -11248.543876, -11248.428636, -11248.313301, -11248.197870, -11248.082345, -11247.966725, -11247.851011, -11247.735204, -11247.619304, -11247.503310, -11247.387223, -11247.271043, -11247.154770, -11247.038403, -11246.921942, -11246.805386, -11246.688736, -11246.571989, -11246.455147, -11246.338206, -11246.221168, -11246.104029, -11245.986790, -11245.869448, -11245.752003, -11245.634452, -11245.516794, -11245.399027, -11245.281148, -11245.163156, -11245.045048, -11244.926821, -11244.808474, -11244.690002, -11244.571404, -11244.451622, -11244.331714, -11244.211682, -11244.091529, -11243.971260, -11243.850877, -11243.730383, -11243.609782, -11243.489075, -11243.368266, -11243.247358, -11243.126354, -11243.005256, -11242.884067, -11242.762790, -11242.641427, -11242.519981, -11242.398455, -11242.276850, -11242.155169, -11242.033415, -11241.911589, -11241.789695, -11241.667734, -11241.545708, -11241.423621, -11241.301472, -11241.179266, -11241.057003, -11240.934686, -11240.812316, -11240.689896, -11240.567427, -11240.444911, -11240.322349, -11240.199745, -11240.077098, -11239.954411, -11239.831686, -11239.708923, -11239.586125, -11239.463292, -11239.340427, -11239.217531, -11239.094604, -11238.971649, -11238.848667, -11238.725659, -11238.602625, -11238.479568, -11238.356489, -11238.233388, -11238.110267, -11237.987127, -11237.863968, -11237.740793, -11237.617601, -11237.494394, -11237.371172, -11237.247937, -11237.124690, -11237.001430, -11236.878160, -11236.754879, -11236.631589, -11236.508290, -11236.384983, -11236.261669, -11236.138348, -11236.015020, -11235.891687, -11235.768350, -11235.645007, -11235.521661, -11235.398312, -11235.274960, -11235.151605, -11235.028248, -11234.904890, -11234.781530, -11234.658170, -11234.534810, -11234.411449, -11234.288089, -11234.164729, -11234.041370, -11233.918013, -11233.794657, -11233.671302, -11233.547950, -11233.424600, -11233.301252, -11233.177907, -11233.054565, -11232.931226, -11232.807890, -11232.684557, -11232.561227, -11232.437902, -11232.314579, -11232.191261, -11232.067947, -11231.944636, -11231.821330, -11231.698028, -11231.574730, -11231.451437, -11231.328147, -11231.204863, -11231.081582, -11230.958307, -11230.835035, -11230.711769, -11230.588507, -11230.465250, -11230.341997, -11230.218749, -11230.095506, -11229.964021, -11229.832538, -11229.701057, -11229.569579, -11229.438103, -11229.306630, -11229.175159, -11229.043690, -11228.912224, -11228.780759, -11228.649297, -11228.517836, -11228.386378, -11228.254921, -11228.123467, -11227.992014, -11227.860563, -11227.729114, -11227.597666, -11227.466220, -11227.334776, -11227.203333, -11227.071892, -11226.940452, -11226.809014, -11226.677578, -11226.546142, -11226.414708, -11226.283276, -11226.151844, -11226.020414, -11225.888985, -11225.757558, -11225.626131, -11225.494706, -11225.363282, -11225.231859, -11225.100437]
    # interpolated_d = [-2594.767029, -2594.723294, -2594.679619, -2594.636003, -2594.592444, -2594.548940, -2594.505491, -2594.462094, -2594.418748, -2594.375450, -2594.332200, -2594.288995, -2594.245833, -2594.202714, -2594.159635, -2594.116594, -2594.073589, -2594.030620, -2593.987683, -2593.944776, -2593.901899, -2593.859049, -2593.816225, -2593.773423, -2593.730643, -2593.687882, -2593.645139, -2593.602411, -2593.559697, -2593.516994, -2593.474301, -2593.431616, -2593.388936, -2593.346260, -2593.303585, -2593.260910, -2593.218233, -2593.175551, -2593.132862, -2593.090165, -2593.047458, -2593.004738, -2592.962004, -2592.919253, -2592.876484, -2592.833694, -2592.790881, -2592.748044, -2592.705180, -2592.662288, -2592.619365, -2592.576410, -2592.533420, -2592.490394, -2592.447330, -2592.404225, -2592.361078, -2592.317886, -2592.274649, -2592.231363, -2592.188028, -2592.144640, -2592.101200, -2592.057703, -2592.014149, -2591.970537, -2591.926863, -2591.883126, -2591.839325, -2591.795458, -2591.751523, -2591.707518, -2591.663442, -2591.619293, -2591.575069, -2591.530768, -2591.486390, -2591.441932, -2591.397394, -2591.352773, -2591.308067, -2591.263276, -2591.218399, -2591.173432, -2591.128376, -2591.083229, -2591.037989, -2590.992656, -2590.947227, -2590.901702, -2590.856079, -2590.810358, -2590.764537, -2590.718615, -2590.672591, -2590.626463, -2590.580232, -2590.533895, -2590.487453, -2590.440904, -2590.394246, -2590.347480, -2590.300605, -2590.253620, -2590.206524, -2590.159316, -2590.111997, -2590.064565, -2590.017019, -2589.969360, -2589.921587, -2589.873699, -2589.825697, -2589.777579, -2589.729346, -2589.680998, -2589.632533, -2589.583953, -2589.535257, -2589.486445, -2589.439535, -2589.392566, -2589.345539, -2589.298451, -2589.251301, -2589.204088, -2589.156811, -2589.109468, -2589.062060, -2589.014585, -2588.967041, -2588.919429, -2588.871748, -2588.823997, -2588.776175, -2588.728281, -2588.680316, -2588.632279, -2588.584169, -2588.535987, -2588.487731, -2588.439402, -2588.390999, -2588.342522, -2588.293972, -2588.245348, -2588.196650, -2588.147878, -2588.099032, -2588.050113, -2588.001120, -2587.952054, -2587.902915, -2587.853704, -2587.804419, -2587.755063, -2587.705635, -2587.656135, -2587.606565, -2587.556924, -2587.507213, -2587.457432, -2587.407583, -2587.357665, -2587.307679, -2587.257626, -2587.207506, -2587.157320, -2587.107068, -2587.056752, -2587.006371, -2586.955927, -2586.905420, -2586.854852, -2586.804221, -2586.753530, -2586.702779, -2586.651969, -2586.601100, -2586.550174, -2586.499190, -2586.448150, -2586.397055, -2586.345904, -2586.294700, -2586.243441, -2586.192130, -2586.140767, -2586.089353, -2586.037888, -2585.986372, -2585.934807, -2585.883194, -2585.831532, -2585.779823, -2585.728066, -2585.676263, -2585.624415, -2585.572521, -2585.520581, -2585.468598, -2585.416571, -2585.364499, -2585.312385, -2585.260228, -2585.208029, -2585.155787, -2585.103503, -2585.051178, -2584.998811, -2584.946402, -2584.893953, -2584.841462, -2584.788930, -2584.736357, -2584.683742, -2584.631086, -2584.578389, -2584.525650, -2584.472869, -2584.420046, -2584.367181, -2584.314272, -2584.261320, -2584.208324, -2584.155284, -2584.102198, -2584.049067, -2583.995889, -2583.942664, -2583.889391, -2583.836069, -2583.782696, -2583.729273, -2583.675797, -2583.622267, -2583.568683, -2583.515043, -2583.461345, -2583.407140, -2583.352872, -2583.298545, -2583.244159, -2583.189716, -2583.135217, -2583.080663, -2583.026056, -2582.971398, -2582.916689, -2582.861931, -2582.807125, -2582.752272, -2582.697374, -2582.642432, -2582.587446, -2582.532419, -2582.477351, -2582.422243, -2582.367096, -2582.311912, -2582.256691, -2582.201434, -2582.146144, -2582.090819, -2582.035462, -2581.980073, -2581.924654, -2581.869205, -2581.813726, -2581.758220, -2581.702686, -2581.647126, -2581.591540, -2581.535929, -2581.480295, -2581.424637, -2581.368956, -2581.313253, -2581.257529, -2581.201785, -2581.146021, -2581.090237, -2581.034435, -2580.978615, -2580.922778, -2580.866924, -2580.811053, -2580.755167, -2580.699266, -2580.643350, -2580.587420, -2580.531476, -2580.475520, -2580.419550, -2580.363569, -2580.307575, -2580.251571, -2580.195555, -2580.139529, -2580.083492, -2580.027446, -2579.971390, -2579.915326, -2579.859252, -2579.803171, -2579.747081, -2579.690983, -2579.634878, -2579.578765, -2579.522646, -2579.466520, -2579.410388, -2579.354249, -2579.298105, -2579.241954, -2579.185799, -2579.129637, -2579.073471, -2579.017300, -2578.961124, -2578.904944, -2578.848759, -2578.792570, -2578.736377, -2578.680180, -2578.623979, -2578.567774, -2578.511566, -2578.455355, -2578.399140, -2578.342922, -2578.286700, -2578.230476, -2578.174249, -2578.118018, -2578.061786, -2578.005550, -2577.949312, -2577.893071, -2577.836827, -2577.780581, -2577.724333, -2577.668083, -2577.611830, -2577.555574, -2577.499317, -2577.443057, -2577.386796, -2577.330532, -2577.274266, -2577.217998, -2577.161728, -2577.105456, -2577.049182, -2576.992907, -2576.936629, -2576.880350, -2576.820210, -2576.760064, -2576.699913, -2576.639756, -2576.579593, -2576.519424, -2576.459249, -2576.399068, -2576.338881, -2576.278688, -2576.218488, -2576.158282, -2576.098070, -2576.037852, -2575.977627, -2575.917395, -2575.857157, -2575.796912, -2575.736661, -2575.676402, -2575.616137, -2575.555865, -2575.495586, -2575.435300, -2575.375006, -2575.314706, -2575.254398, -2575.194083, -2575.133760, -2575.073430, -2575.013092, -2574.952747, -2574.892393, -2574.832032, -2574.771663, -2574.711286, -2574.650901, -2574.590508,]
    # interpolated_t = [0.000000, 0.010084, 0.020168, 0.030252, 0.040336, 0.050420, 0.060504, 0.070588, 0.080672, 0.090756, 0.100840, 0.110924, 0.121008, 0.131092, 0.141176, 0.151261, 0.161345, 0.171429, 0.181513, 0.191597, 0.201681, 0.211765, 0.221849, 0.231933, 0.242017, 0.252101, 0.262185, 0.272269, 0.282353, 0.292437, 0.302521, 0.312605, 0.322689, 0.332773, 0.342857, 0.352941, 0.363025, 0.373109, 0.383193, 0.393277, 0.403361, 0.413445, 0.423529, 0.433613, 0.443697, 0.453782, 0.463866, 0.473950, 0.484034, 0.494118, 0.504202, 0.514286, 0.524370, 0.534454, 0.544538, 0.554622, 0.564706, 0.574790, 0.584874, 0.594958, 0.605042, 0.615126, 0.625210, 0.635294, 0.645378, 0.655462, 0.665546, 0.675630, 0.685714, 0.695798, 0.705882, 0.715966, 0.726050, 0.736134, 0.746218, 0.756303, 0.766387, 0.776471, 0.786555, 0.796639, 0.806723, 0.816807, 0.826891, 0.836975, 0.847059, 0.857143, 0.867227, 0.877311, 0.887395, 0.897479, 0.907563, 0.917647, 0.927731, 0.937815, 0.947899, 0.957983, 0.968067, 0.978151, 0.988235, 0.998319, 1.008403, 1.018487, 1.028571, 1.038655, 1.048739, 1.058824, 1.068908, 1.078992, 1.089076, 1.099160, 1.109244, 1.119328, 1.129412, 1.139496, 1.149580, 1.159664, 1.169748, 1.179832, 1.189916, 1.200000, 1.210084, 1.220168, 1.230252, 1.240336, 1.250420, 1.260504, 1.270588, 1.280672, 1.290756, 1.300840, 1.310924, 1.321008, 1.331092, 1.341176, 1.351261, 1.361345, 1.371429, 1.381513, 1.391597, 1.401681, 1.411765, 1.421849, 1.431933, 1.442017, 1.452101, 1.462185, 1.472269, 1.482353, 1.492437, 1.502521, 1.512605, 1.522689, 1.532773, 1.542857, 1.552941, 1.563025, 1.573109, 1.583193, 1.593277, 1.603361, 1.613445, 1.623529, 1.633613, 1.643697, 1.653782, 1.663866, 1.673950, 1.684034, 1.694118, 1.704202, 1.714286, 1.724370, 1.734454, 1.744538, 1.754622, 1.764706, 1.774790, 1.784874, 1.794958, 1.805042, 1.815126, 1.825210, 1.835294, 1.845378, 1.855462, 1.865546, 1.875630, 1.885714, 1.895798, 1.905882, 1.915966, 1.926050, 1.936134, 1.946218, 1.956303, 1.966387, 1.976471, 1.986555, 1.996639, 2.006723, 2.016807, 2.026891, 2.036975, 2.047059, 2.057143, 2.067227, 2.077311, 2.087395, 2.097479, 2.107563, 2.117647, 2.127731, 2.137815, 2.147899, 2.157983, 2.168067, 2.178151, 2.188235, 2.198319, 2.208403, 2.218487, 2.228571, 2.238655, 2.248739, 2.258824, 2.268908, 2.278992, 2.289076, 2.299160, 2.309244, 2.319328, 2.329412, 2.339496, 2.349580, 2.359664, 2.369748, 2.379832, 2.389916, 2.400000, 2.410169, 2.420339, 2.430508, 2.440678, 2.450847, 2.461017, 2.471186, 2.481356, 2.491525, 2.501695, 2.511864, 2.522034, 2.532203, 2.542373, 2.552542, 2.562712, 2.572881, 2.583051, 2.593220, 2.603390, 2.613559, 2.623729, 2.633898, 2.644068, 2.654237, 2.664407, 2.674576, 2.684746, 2.694915, 2.705085, 2.715254, 2.725424, 2.735593, 2.745763, 2.755932, 2.766102, 2.776271, 2.786441, 2.796610, 2.806780, 2.816949, 2.827119, 2.837288, 2.847458, 2.857627, 2.867797, 2.877966, 2.888136, 2.898305, 2.908475, 2.918644, 2.928814, 2.938983, 2.949153, 2.959322, 2.969492, 2.979661, 2.989831, 3.000000, 3.010169, 3.020339, 3.030508, 3.040678, 3.050847, 3.061017, 3.071186, 3.081356, 3.091525, 3.101695, 3.111864, 3.122034, 3.132203, 3.142373, 3.152542, 3.162712, 3.172881, 3.183051, 3.193220, 3.203390, 3.213559, 3.223729, 3.233898, 3.244068, 3.254237, 3.264407, 3.274576, 3.284746, 3.294915, 3.305085, 3.315254, 3.325424, 3.335593, 3.345763, 3.355932, 3.366102, 3.376271, 3.386441, 3.396610, 3.406780, 3.416949, 3.427119, 3.437288, 3.447458, 3.457627, 3.467797, 3.477966, 3.488136, 3.498305, 3.508475, 3.518644, 3.528814, 3.538983, 3.549153, 3.559322, 3.569492, 3.579661, 3.589831, 3.600000, 3.610526, 3.621053, 3.631579, 3.642105, 3.652632, 3.663158, 3.673684, 3.684211, 3.694737, 3.705263, 3.715789, 3.726316, 3.736842, 3.747368, 3.757895, 3.768421, 3.778947, 3.789474, 3.800000, 3.810526, 3.821053, 3.831579, 3.842105, 3.852632, 3.863158, 3.873684, 3.884211, 3.894737, 3.905263, 3.915789, 3.926316, 3.936842, 3.947368, 3.957895, 3.968421, 3.978947, 3.989474, 4.000000]

    traj_length = len(interpolated_s)
    thetas, curvatures, velocities, accelerations = [0] * traj_length, [0] * traj_length, [0] * traj_length, [0] * traj_length
    for i in range(0, traj_length):
        if i != traj_length - 1:
            thetas[i] = np.arctan2(interpolated_d[i + 1] - interpolated_d[i], interpolated_s[i + 1] - interpolated_s[i])
            velocities[i] = np.sqrt((interpolated_d[i + 1] - interpolated_d[i]) ** 2.0 + (interpolated_s[i + 1] - interpolated_s[i]) ** 2.0) / (interpolated_t[i + 1] - interpolated_t[i])
        elif i == traj_length - 1:
            thetas[i] = thetas[i - 1]
            velocities[i] = velocities[i - 1]
    for i in range(0, traj_length):
        if i != traj_length - 1:
            curvatures[i] = (thetas[i + 1] - thetas[i]) / np.sqrt((interpolated_d[i + 1] - interpolated_d[i]) ** 2.0 + (interpolated_s[i + 1] - interpolated_s[i]) ** 2.0)
            accelerations[i] = (velocities[i + 1] - velocities[i]) / (interpolated_t[i + 1] - interpolated_t[i])
        elif i == traj_length - 1:
            curvatures[i] = curvatures[i - 1]
            accelerations[i] = accelerations[i - 1]

    info_fig = plt.figure(0, (12, 12))
    ax_0 = info_fig.add_subplot(221)
    ax_1 = info_fig.add_subplot(222)
    ax_2 = info_fig.add_subplot(223)
    ax_3 = info_fig.add_subplot(224)

    ax_0.plot(np.arange(0, traj_length, 1), thetas, c='r', linewidth=1.0)
    ax_0.title.set_text('theta')

    ax_1.plot(np.arange(0, traj_length, 1), curvatures, c='r', linewidth=1.0)
    ax_1.title.set_text('curvature')

    ax_2.plot(np.arange(0, traj_length, 1), velocities, c='r', linewidth=1.0)
    ax_2.title.set_text('velocity')

    ax_3.plot(np.arange(0, traj_length, 1), np.clip(accelerations, -5, 5), c='r', linewidth=1.0)
    ax_3.title.set_text('acceleration')



    # plt.figure(0)
    # plt.title('s-t')
    # plt.plot(interpolated_t, interpolated_s, c='r', linewidth=1.0)
    # plt.scatter(interpolated_t, interpolated_s, c='g', s=1.0)
    #
    # v_s_t, v_s = Utils.calculateVelocity(interpolated_t, interpolated_s)
    # plt.figure(1)
    # plt.title('ds-t')
    # plt.plot(v_s_t, v_s, c='r', linewidth=1.0)
    #
    # a_s_t, a_s = Utils.calculateAcceleration(v_s_t, v_s)
    # plt.figure(2)
    # plt.title('dds-t')
    # plt.plot(a_s_t, a_s, c='r', linewidth=1.0)

    plt.show()

